logging {
  level = "info"
  format = "logfmt"
}

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.relabel "pods" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    target_label  = "app_name"
    action        = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_part_of"]
    target_label  = "part_of"
    action        = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_my_company_com_environment"]
    target_label  = "environment"
    action        = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_my_company_com_technology"]
    target_label  = "technology"
    action        = "replace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_my_company_com_owner"]
    target_label  = "owner"
    action        = "replace"
  }
}

loki.source.kubernetes "pods" {
  targets    = discovery.relabel.pods.output
  forward_to = [loki.process.process.receiver]
}

loki.process "process" {
  forward_to = [loki.write.loki.receiver]

  stage.drop {
    older_than          = "1h"
    drop_counter_reason = "too old"
  }
  stage.match {
    selector = "{instance=~\".*\"}"
    stage.json {
      expressions = {
        level = "\"level\"",
      }
    }
    stage.labels {
      values = {
        level = "level",
      }
    }
  }
  stage.label_drop {
    values = [ "job", "service_name" ]
  }
}

loki.write "loki" {
  endpoint {
    url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
  }
}

otelcol.receiver.otlp "default" {
  http {}
  grpc {}

  output {
    logs    = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    logs    = [otelcol.exporter.otlphttp.default.input]
  }
}

otelcol.exporter.otlphttp "default" {
  client {
    endpoint = "http://loki-gateway.monitoring.svc.cluster.local/otlp"
  }
}
